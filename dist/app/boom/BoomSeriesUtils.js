System.register(["lodash", "./index", "./../GrafanaUtils"], function (exports_1, context_1) {
    "use strict";
    var lodash_1, index_1, GrafanaUtils_1, getDisplayValueTemplate, getBGColor, getTextColor, getThresholds, getSeriesValue, getLink, getCurrentTimeStamp, doesValueNeedsToHide, replaceDelimitedColumns, getRowName, getColName, GetValuesReplaced;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            },
            function (GrafanaUtils_1_1) {
                GrafanaUtils_1 = GrafanaUtils_1_1;
            }
        ],
        execute: function () {
            exports_1("getDisplayValueTemplate", getDisplayValueTemplate = function (value, pattern, seriesName, row_col_wrapper, thresholds) {
                var template = "_value_";
                if (lodash_1.default.isNaN(value) || value === null) {
                    template = pattern.null_value || "No data";
                    if (pattern.null_value === "") {
                        template = "";
                    }
                }
                else {
                    template = pattern.displayTemplate || template;
                    if (pattern.enable_transform) {
                        var transform_values = pattern.transform_values.split("|");
                        template = index_1.getItemBasedOnThreshold(thresholds, transform_values, value, template);
                    }
                    if (pattern.enable_transform_overrides && pattern.transform_values_overrides !== "") {
                        var _transform_values_overrides = pattern.transform_values_overrides
                            .split("|")
                            .filter(function (con) { return con.indexOf("->"); })
                            .map(function (con) { return con.split("->"); })
                            .filter(function (con) { return +(con[0]) === value; })
                            .map(function (con) { return con[1]; });
                        if (_transform_values_overrides.length > 0 && _transform_values_overrides[0] !== "") {
                            template = ("" + _transform_values_overrides[0]).trim();
                        }
                    }
                    if (pattern.enable_transform || pattern.enable_transform_overrides) {
                        template = replaceDelimitedColumns(template, seriesName, pattern.delimiter, row_col_wrapper);
                    }
                }
                return template;
            });
            exports_1("getBGColor", getBGColor = function (value, pattern, thresholds, list_of_bgColors_based_on_thresholds, bgColorOverRides) {
                var bgColor = "transparent";
                if (lodash_1.default.isNaN(value) || value === null) {
                    bgColor = pattern.null_color || "darkred";
                    if (pattern.null_color === "") {
                        bgColor = "transparent";
                    }
                }
                else {
                    bgColor = pattern.defaultBGColor || bgColor;
                    if (pattern.enable_bgColor && pattern.bgColors) {
                        bgColor = index_1.getItemBasedOnThreshold(thresholds, list_of_bgColors_based_on_thresholds, value, bgColor);
                    }
                    if (pattern.enable_bgColor_overrides && pattern.bgColors_overrides !== "") {
                        var _bgColors_overrides = bgColorOverRides.filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                        if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== "") {
                            bgColor = ("" + _bgColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(bgColor);
            });
            exports_1("getTextColor", getTextColor = function (value, pattern, thresholds, list_of_textColors_based_on_thresholds, txtColorOverrides) {
                var textColor = document.body.classList.contains("theme-light") ? "black" : "white";
                if (lodash_1.default.isNaN(value) || value === null) {
                    textColor = pattern.null_textcolor || textColor;
                }
                else {
                    textColor = pattern.defaultTextColor || textColor;
                    if (pattern.enable_textColor && pattern.textColors) {
                        textColor = index_1.getItemBasedOnThreshold(thresholds, list_of_textColors_based_on_thresholds, value, textColor);
                    }
                    if (pattern.enable_textColor_overrides && pattern.textColors_overrides !== "") {
                        var _textColors_overrides = txtColorOverrides.filter(function (con) { return con.indexOf("->"); }).map(function (con) { return con.split("->"); }).filter(function (con) { return +(con[0]) === value; }).map(function (con) { return con[1]; });
                        if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== "") {
                            textColor = ("" + _textColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(textColor);
            });
            exports_1("getThresholds", getThresholds = function (thresholdsArray, enable_time_based_thresholds, time_based_thresholds, currentTimeStamp) {
                if (enable_time_based_thresholds) {
                    var metricrecivedTimeStamp_1 = currentTimeStamp || new Date();
                    var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                    var weekdays_1 = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
                    lodash_1.default.each(time_based_thresholds, function (tbtx) {
                        if (tbtx && tbtx.from && tbtx.to && tbtx.enabledDays &&
                            (metricrecivedTimeStamp_innumber_1 >= +(tbtx.from)) &&
                            (metricrecivedTimeStamp_innumber_1 <= +(tbtx.to)) &&
                            (tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1) &&
                            tbtx.threshold) {
                            thresholdsArray = (tbtx.threshold + "").split(",").map(function (d) { return +d; });
                        }
                    });
                }
                return thresholdsArray || [];
            });
            exports_1("getSeriesValue", getSeriesValue = function (series, statType) {
                var value = NaN;
                if (statType === "last_time") {
                    if (lodash_1.default.last(series.datapoints)) {
                        value = lodash_1.default.last(series.datapoints)[1];
                    }
                }
                else if (statType === "last_time_nonnull") {
                    var non_null_data = series.datapoints.filter(function (s) { return s[0]; });
                    if (lodash_1.default.last(non_null_data) && lodash_1.default.last(non_null_data)[1]) {
                        value = lodash_1.default.last(non_null_data)[1];
                    }
                }
                else if (series.stats) {
                    value = series.stats[statType];
                }
                return value;
            });
            exports_1("getLink", getLink = function (enable_clickable_cells, clickable_cells_link, range) {
                var link = enable_clickable_cells ? clickable_cells_link || "#" : "#";
                if (link && link !== "#") {
                    link += (link.indexOf("?") > -1 ? "&from=" + range.from : "?from=" + range.from);
                    link += "&to=" + range.to;
                }
                return link;
            });
            exports_1("getCurrentTimeStamp", getCurrentTimeStamp = function (dataPoints) {
                var currentTimeStamp = new Date();
                if (dataPoints && dataPoints.length > 0 && lodash_1.default.last(dataPoints).length === 2) {
                    currentTimeStamp = new Date(lodash_1.default.last(dataPoints)[1]);
                }
                return currentTimeStamp;
            });
            exports_1("doesValueNeedsToHide", doesValueNeedsToHide = function (value, filter) {
                var hidden = false;
                if ((value || value === 0) && filter && (filter.value_below !== "" || filter.value_above !== "")) {
                    if (filter.value_below !== "" && value < +(filter.value_below)) {
                        hidden = true;
                    }
                    if (filter.value_above !== "" && value > +(filter.value_above)) {
                        hidden = true;
                    }
                }
                return hidden;
            });
            exports_1("replaceDelimitedColumns", replaceDelimitedColumns = function (inputstring, seriesName, delimiter, row_col_wrapper) {
                var outputString = seriesName
                    .split(delimiter || ".")
                    .reduce(function (r, it, i) {
                    return r.replace(new RegExp(row_col_wrapper + i + row_col_wrapper, "g"), it);
                }, inputstring);
                return outputString;
            });
            exports_1("getRowName", getRowName = function (row_name, delimiter, row_col_wrapper, seriesName, _metricname, _tags) {
                if (delimiter.toLowerCase() === "tag") {
                    row_name = row_name.replace(new RegExp("{{metric_name}}", "g"), _metricname);
                    row_name = index_1.replace_tags_from_field(row_name, _tags);
                }
                else {
                    row_name = replaceDelimitedColumns(row_name, seriesName, delimiter, row_col_wrapper);
                    if (seriesName.split(delimiter || ".").length === 1) {
                        row_name = seriesName;
                    }
                }
                return row_name.replace(new RegExp("_series_", "g"), seriesName.toString());
            });
            exports_1("getColName", getColName = function (col_name, delimiter, row_col_wrapper, seriesName, row_name, _metricname, _tags) {
                if (delimiter.toLowerCase() === "tag") {
                    col_name = col_name.replace(new RegExp("{{metric_name}}", "g"), _metricname);
                    row_name = index_1.replace_tags_from_field(col_name, _tags);
                }
                else {
                    col_name = replaceDelimitedColumns(col_name, seriesName, delimiter, row_col_wrapper);
                    if (seriesName.split(delimiter || ".").length === 1 || row_name === seriesName) {
                        col_name = col_name || "Value";
                    }
                }
                return col_name.replace(new RegExp("_series_", "g"), seriesName.toString());
            });
            exports_1("GetValuesReplaced", GetValuesReplaced = function (strToReplace, value, valueformatted, stats, decimals, format, _metricname, _tags, delimiter) {
                var value_raw = lodash_1.default.isNaN(value) || value === null ? "null" : value.toString().trim();
                var value_formatted = lodash_1.default.isNaN(value) || value === null ? "null" : valueformatted.toString().trim();
                strToReplace = strToReplace.replace(new RegExp("_value_min_raw_", "g"), stats.min);
                strToReplace = strToReplace.replace(new RegExp("_value_max_raw_", "g"), stats.max);
                strToReplace = strToReplace.replace(new RegExp("_value_avg_raw_", "g"), stats.avg);
                strToReplace = strToReplace.replace(new RegExp("_value_current_raw_", "g"), stats.current);
                strToReplace = strToReplace.replace(new RegExp("_value_total_raw_", "g"), stats.total);
                strToReplace = strToReplace.replace(new RegExp("_value_raw_", "g"), value_raw);
                strToReplace = strToReplace.replace(new RegExp("_value_min_", "g"), GrafanaUtils_1.get_formatted_value(stats.min, decimals, format));
                strToReplace = strToReplace.replace(new RegExp("_value_max_", "g"), GrafanaUtils_1.get_formatted_value(stats.max, decimals, format));
                strToReplace = strToReplace.replace(new RegExp("_value_avg_", "g"), GrafanaUtils_1.get_formatted_value(stats.avg, decimals, format));
                strToReplace = strToReplace.replace(new RegExp("_value_current_", "g"), GrafanaUtils_1.get_formatted_value(stats.current, decimals, format));
                strToReplace = strToReplace.replace(new RegExp("_value_total_", "g"), GrafanaUtils_1.get_formatted_value(stats.total, decimals, format));
                strToReplace = strToReplace.replace(new RegExp("_value_", "g"), value_formatted);
                if (delimiter.toLowerCase() === "tag") {
                    strToReplace = strToReplace.replace(new RegExp("{{metric_name}}", "g"), _metricname);
                    strToReplace = index_1.replace_tags_from_field(strToReplace, _tags);
                }
                return strToReplace;
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,